"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[603],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,d=m["".concat(p,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},648:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={sidebar_label:"utils",title:"nlp.utils"},p=void 0,c={unversionedId:"reference/nlp/utils",id:"reference/nlp/utils",isDocsHomePage:!1,title:"nlp.utils",description:"format\\_vars",source:"@site/docs/reference/nlp/utils.md",sourceDirName:"reference/nlp",slug:"/reference/nlp/utils",permalink:"/FLAML/docs/reference/nlp/utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/nlp/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"nlp.utils"},sidebar:"referenceSideBar",previous:{title:"trainer",permalink:"/FLAML/docs/reference/nlp/huggingface/trainer"},next:{title:"autovw",permalink:"/FLAML/docs/reference/onlineml/autovw"}},s=[{value:"format_vars",id:"format_vars",children:[],level:4},{value:"HPOArgs Objects",id:"hpoargs-objects",children:[],level:2},{value:"DISTILHPOArgs Objects",id:"distilhpoargs-objects",children:[],level:2}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"format_vars"},"format","_","vars"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def format_vars(resolved_vars: Dict) -> str\n")),(0,o.kt)("p",null,"Formats the resolved variable dict into a single string."),(0,o.kt)("h2",{id:"hpoargs-objects"},"HPOArgs Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass HPOArgs()\n")),(0,o.kt)("p",null,"The HPO setting."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"output_dir")," ",(0,o.kt)("em",{parentName:"li"},"str")," - data root directory for outputing the log, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"model_path")," ",(0,o.kt)("em",{parentName:"li"},'str, optional, defaults to "facebook/muppet-roberta-base"')," - A string,\nthe path of the language model file, either a path from huggingface\nmodel card huggingface.co/models, or a local path for the model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fp16")," ",(0,o.kt)("em",{parentName:"li"},'bool, optional, defaults to "False"')," - A bool, whether to use FP16."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"max_seq_length")," ",(0,o.kt)("em",{parentName:"li"},"int, optional, defaults to 128")," - An integer, the max length of the sequence."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ckpt_per_epoch")," ",(0,o.kt)("em",{parentName:"li"},"int, optional, defaults to 1")," - An integer, the number of checkpoints per epoch.")),(0,o.kt)("h2",{id:"distilhpoargs-objects"},"DISTILHPOArgs Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass DISTILHPOArgs()\n")),(0,o.kt)("p",null,"The HPO setting"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"  output_dir (:obj:",(0,o.kt)("inlineCode",{parentName:"p"},"str"),"):\ndata root directory for outputing the log, etc.\nmodel_path (:obj:",(0,o.kt)("inlineCode",{parentName:"p"},"str"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,o.kt)("inlineCode",{parentName:"p"},"facebook/muppet-roberta-base"),"):\nA string, the path of the language model file, either a path from huggingface\nmodel card huggingface.co/models, or a local path for the model\nfp16 (:obj:",(0,o.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,o.kt)("inlineCode",{parentName:"p"},"False"),"):\nA bool, whether to use FP16\nmax_seq_length (:obj:",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,o.kt)("inlineCode",{parentName:"p"},"128"),"):\nAn integer, the max length of the sequence\nckpt_per_epoch (:obj:",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"):\nAn integer, the number of checkpoints per epoch"))}m.isMDXComponent=!0}}]);